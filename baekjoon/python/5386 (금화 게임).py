"""
S = 100
G(0), G(1), ..., G(100) 순서

K: 2 --> 0 1 2
0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1

K: 3 --> 0 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0

K: 4 --> 0 1 0 1 2
0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0 1 0 1 2 0

K: 5 --> 0 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0

K: 6 --> 0 1 0 1 0 1 2
0 1 0 1 0 1 2 0 1 0 1 0 1 2 0 1 0 1 0 1 2 0 1 0 1 0 1 2 0 1 0 1 0 1 2 0 1 0 1 0 1 2 0 1 0 1 0 1 2 0 1 0 1 0 1 2 0 1 0 1 0 1 2 0 1 0 1 0 1 2 0 1 0 1 0 1 2 0 1 0 1 0 1 2 0 1 0 1 0 1 2 0 1 0 1 0 1 2 0 1 0

K: 7 --> 0 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0

K: 8 --> 0 1 0 1 0 1 0 1 2
0 1 0 1 0 1 0 1 2 0 1 0 1 0 1 0 1 2 0 1 0 1 0 1 0 1 2 0 1 0 1 0 1 0 1 2 0 1 0 1 0 1 0 1 2 0 1 0 1 0 1 0 1 2 0 1 0 1 0 1 0 1 2 0 1 0 1 0 1 0 1 2 0 1 0 1 0 1 0 1 2 0 1 0 1 0 1 0 1 2 0 1 0 1 0 1 0 1 2 0 1

K: 9 --> 0 1
0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0

=>
짝수: (0 1 K // 2번 + 2) 반복
홀수: (0 1 (K + 1) // 2번) 반복
"""

import sys

T = int(sys.stdin.readline().rstrip())

for _ in range(T):
    S, K = map(int, sys.stdin.readline().split())
    test = [0, 1] * ((K + 1) // 2) + ([] if K % 2 else [2])

    p = 0
    flag = False
    while K ** p <= S:
        if test[(S - K ** p) % (K + 1)] == 0:
            flag = True
            break
        p += 1

    print(0 if not flag else K ** p)
    